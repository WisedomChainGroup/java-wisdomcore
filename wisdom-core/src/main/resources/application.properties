############################### 数据库连接配置 ###########################################
spring.datasource.url=${DATA_SOURCE_URL:jdbc:postgresql://localhost:5432/your-data-base}
spring.datasource.username=${DB_USERNAME:username}
spring.datasource.password=${DB_PASSWORD:password}
########################################################################################
spring.jpa.hibernate.ddl-auto=${DDL_AUTO:update}
spring.jpa.show-sql=${SHOW_SQL:false}
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
########################################################################################
#################################### 共识参数 ###########################################
# 矿工收益地址
miner.coinbase=${WDC_MINER_COINBASE:your coin base address}
# 验证者节点配置
miner.validators=${VALIDATORS:genesis/validators.json}
miner.allow-empty-block=true
# 创世区块文件
wisdom.consensus.genesis=${GENESIS_FILE:genesis/wisdom-genesis-generator.json}
# 出块间隔 用于难度值调整
wisdom.consensus.block-interval=${BLOCK_INTERVAL:30}
# 每个节点进行工作量证明的限制时间
wisdom.consensus.pow-wait=${POW_WAIT:90}
# 一个纪元包含多少区块，用于难度值调整
# 因为创世区块不是挖出来的所以 创世区块不包含在第0个纪元中
# 0号纪元的第一个区块是1号区块，0号纪元的最后一个区块是120号区块
# 以此类推
# n纪元的第一个区块是n*120+1, n纪元的最后一个区块是(n+1)*120
wisdom.consensus.blocks-per-era=${BLOCKS_PER_ERA:120}
# 是否开启挖矿
wisdom.consensus.enable-mining=${ENABLE_MINING:false}
# 是否允许临时分叉 deprecated
wisdom.consensus.allow-fork=${ALLOW_FORK:true}
# 预生成的创世区块，用于快速同步
wisdom.consensus.fast-sync.directory=${FAST_SYNC_DIRECTORY:F:\\java-wisdomcore\\wisdom-core\\src\\main\\resources\\genesis\\}
wisdom.sync.rate-limits[status]=16
wisdom.sync.rate-limits[get-blocks]=16
wisdom.sync.lock-timeout=1
wisdom.sync.block-write-rate=3
# 被认为不可逆转的区块数量
wisdom.allow-miner-joins-era=${ALLOW_MINER_JOINS_ERA:2380}
# 切换到 10s 一个出块的纪元,
wisdom.block-interval-switch-era=${BLOCK_INTERVAL_SWITCH_ERA:2380}
wisdom.block-interval-switch-to=${BLOCK_INTERVAL_SWITCH_TO:10}
########################################################################################
#################################### 事务参数 ###########################################
#天区块数
transaction.day.count=${TRANSACTION_DAY_COUNT:2880}
#最低手续费
min.procedurefee=${TRANSACTION_MIN_FEE:200000}
#nonce最大数
transaction.nonce=${TRANSACTION_NONCE:128}
#区块大小,单位是兆
block.size=${BLOCK_SIZE:4}
########################################################################################
#################################### 事务内存池参数 ######################################
#事务内存池清除小时，默认2个小时
pool.clear.days=2
#queued上限
pool.queued.maxcount=60000
#pending上限
pool.pending.maxcount=30000
#queued到pending最大事务数
pool.queuedtopending.maxcount=5000
########################################################################################
#################################### p2p配置 ###########################################
# p2p 通信方式，默认是 rest
# grpc 是可选项
p2p.mode=${P2P_MODE:grpc}
# lru 缓存大小，防止p2p过量泛洪`
p2p.packet-cacheSize=${P2P_PACKET_CACHE_SIZE:256}
# grpc 节点发现配置
# 设置自己的节点地址 格式为 wisdom://节点私钥@ip地址:端口 或者 wisdom://ip地址:端口
# 如果不填写私钥，节点会创建密钥对，启动后可以在日志里查看自己的地址
p2p.address=${P2P_ADDRESS:wisdom://localhost:9585}
# p2p 种子节点地址 多个用逗号分割 格式为 wisdom://节点公钥@ip地址:端口, 公钥可以省略
# 例如 BOOTSTRAPS=wisdom://localhost:9001,wisdom://localhost:9002,wisdom://localhost:9003
p2p.bootstraps=${BOOTSTRAPS:}
# 信任节点地址，多个用逗号分割 格式为 wisdom://节点公钥@ip地址:端口， 公钥不可以省略
p2p.trustedpeers=${TRUSTED_PEERS:}
# 是否开启节点发现功能
# 若不开启节点发现，邻居节点固定为 种子节点+信任节点
# 若开启节点发现，初始邻居节点为种子节点+信任节点，随着节点运行会动态删增邻居节点，但信任节点不会被删除
p2p.enable-discovery=${ENABLE_DISCOVERY:false}
p2p.max-blocks-per-transfer=${MAX_BLOCKS_PER_TRANSFER:256}
p2p.enable-message-log=${ENABLE_MESSAGE_LOG:false}
########################################################################################
#################################### 节点配置 ###########################################
# 启动时是否清除数据
clear-data=${CLEAR_DATA:false}
clear-cache=${CLEAR_CACHE:false}
# 节点类型，exchange 不校验孵化事务
node-character=${NODE_CHARACTER:default}
# 开始merkle校验高度
merkle-height=${MERKLE_HEIGHT:1200000}
# rpc 端口配置
server.port=${SERVER_PORT:19585}
########################################################################################
# 节点程序版本
wisdom.version=v2.0.5
########################################################################################
# 事务的过期时间
wisdom.ipc-config.lifetime=3600
# queued到pending的写入周期
wisdom.ipc-config.queued_to_pending_cycle=*/5 * * * * ?
# queued与pending的清理周期
wisdom.ipc-config.clear-cycle=0 */1 * * * ?
# 是否允许本机客户端才能连接
wisdom.ipc-config.local-only=false
wisdom.cache-dir=${CACHE_DIR:}
#只允许本地获取的动态token才可以访问rpc
wisdom.localonly=${LOCALONLY:false}
########################################################################################
#################################### key-value 数据库配置 ###########################################
# wisdom.database.name=leveldb 已废弃
wisdom.database.name=leveldb
wisdom.database.directory=${DATABASE_DIRECTORY:database}
# 数据库类型 选择 memory 使用内存数据库
wisdom.database.type=${DATABASE_TYPE:leveldb}
max-open-files=512
# 是否开启检查点
wisdom.open-check-point=${OPEN_CHECK_POINT:false}
# 不允许投票为0成为矿工的高度
wisdom.wip-1217.height=${WISDOM_WIP_1217_HEIGHT:769876}
# ceo交易所address跟踪
wisdom.ceo.trace=${WISDOM_CEO_TRACE:false}
wisdom.trace.address=${WISDOM_TRACE_ADDRESS:ca33fead17d601b83e220927703a703c6d1ea1c9697375fabf0bf307f003f999}
#开启关闭dll动态接口
wisdom.dll.rpc=${WISDOM_DLL_RPC:false}
# 暴露部分端点
management.endpoints.web.exposure.include=shutdown,health
# 开启shutdown
management.endpoint.shutdown.enabled=true
# 更改path路径（POST:http://ip:port/wisdom/shutdown）
management.endpoints.web.base-path=/wisdom
