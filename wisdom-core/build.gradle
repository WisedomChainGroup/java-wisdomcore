
buildscript {
    repositories {
        if(System.getenv("X_DISABLE_MAVEN_MIRROR") == null || System.getenv("X_DISABLE_MAVEN_MIRROR").isEmpty()){
            System.out.println("use aliyun maven repository")
            maven {
                url 'http://maven.aliyun.com/nexus/content/groups/public/'
            }
            maven {
                url 'http://maven.aliyun.com/nexus/content/repositories/jcenter'
            }
        }else{
            System.out.println("not import aliyun repository settings")
        }

        mavenLocal()
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/TrustedDataFramework/java-rlp")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
        maven { url "https://repo.springsource.org/plugins-release" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'io.spring.gradle:propdeps-plugin:0.0.9.RELEASE'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.0.1'
        classpath 'com.typesafe:config:1.2.1'
        classpath('se.transmode.gradle:gradle-docker:1.2')
    }

}

plugins {
    id 'application'
//    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.6.3'
    id 'com.jfrog.bintray' version '1.0'
    id 'org.ajoberstar.grgit' version '2.2.0' apply false
//    id 'org.springframework.boot' version '2.1.4.RELEASE'
}

apply plugin: 'propdeps-maven'
apply plugin: 'com.jfrog.artifactory-upload'
apply plugin: 'docker'

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

processResources{
    exclude('genesis/wisdom-genesis-generator.json')
}

//apply plugin: 'io.spring.dependency-management'


sourceCompatibility = 1.8

mainClassName = 'org.wisdom.Start'
applicationDefaultJvmArgs = ["-server", "-Xss2m", "-Xmx2G", "-XX:-OmitStackTraceInFastThrow"]

if (project.hasProperty('jvmArgs')) {
    applicationDefaultJvmArgs = applicationDefaultJvmArgs + project.jvmArgs.split('\\s+').toList()
}
if (project.hasProperty("mainClass")) {
    mainClassName = mainClass
}


ext.generatedSrcDir = file('src/gen/java')

sourceSets.main.java.srcDirs += generatedSrcDir


tasks.withType(JavaCompile) {
    options.warnings = false
}

task runKeyStoreTool(type: JavaExec){
    main = "org.wisdom.tools.KeyStoreTool"
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    if (project.hasProperty("appArgs")) {
        args appArgs.split(" ")
    }
}

task runTransactionTestTool(type: JavaExec){
    main = "org.wisdom.tools.TransactionTestTool"
    classpath = sourceSets.main.runtimeClasspath
    if (project.hasProperty("appArgs")) {
        args appArgs.split(" ")
    }
}

// bash src/main/docker/core_v2/build-docker.sh -t test
task buildDockerJdk(type: Docker) {
    push = false
    tag = "wisdomchain/server_jre8"
    tagVersion = 'latest'
    applicationName = 'server_jre8'
    dockerfile = file('src/main/docker/server_jre8/Dockerfile')
}

// bash src/main/docker/server_jre8_with_dependencies/build-docker.sh -t latest
task buildDockerJdkWithDependencies(type: Docker) {
    push = false
    tag = "wisdomchain/server_jre8_with_dependencies"
    tagVersion = 'latest'
    applicationName = 'server_jre8_with_dependencies'
    dockerfile = file('src/main/docker/server_jre8_with_dependencies/Dockerfile')
    doFirst {
        copy {
            from copyDependencies into "${stageDir}/lib"
        }
        copy{
            from 'src/main/resources/genesis/wisdom-genesis-generator.json' into "${stageDir}/genesis"
        }
    }
}

task buildDockerCore(type: Docker, dependsOn: jar) {
    push = false
    tag = "wisdomchain/wdc_core"
    tagVersion = 'latest'
    applicationName = 'wdc_core'
    dockerfile = file('src/main/docker/core/Dockerfile')

    doFirst {
        copy {
            from jar into stageDir
        }
        copy {
            from 'src/main/docker/core/run_wdc_core.sh' into stageDir
        }
        copy {
            from 'src/main/docker/core/version.json' into stageDir
        }
    }
}

task buildDockerCoreTest(type: Docker, dependsOn: jar) {
    push = false
    tag = "wisdomchain/wdc_core"
    tagVersion = 'test'
    applicationName = 'wdc_core'
    dockerfile = file('src/main/docker/core/Dockerfile')

    doFirst {
        copy {
            from jar into stageDir
        }
        copy {
            from 'src/main/docker/core/run_wdc_core.sh' into stageDir
        }
        copy {
            from 'src/main/docker/core/version.json' into stageDir
        }
    }
}

task buildDockerFullNode(type: Docker, dependsOn: jar) {
    push = false
    tag = "wisdomchain/wisdom_fullnode"
    tagVersion = 'latest'
    applicationName = 'wdc_fullnode'
    dockerfile = file('src/main/docker/core/Dockerfile')

    doFirst {
        copy {
            from jar into stageDir
        }
        copy {
            from copyDependencies into "${stageDir}/lib"
        }
        copy {
            from 'src/main/docker/core/run_wdc_core.sh' into stageDir
        }
    }
}

task buildDockerPgsql(type: Docker) {
    push = false
    tag = "wisdomchain/wdc_pgsql"
    tagVersion = 'latest'
    applicationName = 'wdc_pgsql'
    dockerfile = file('src/main/docker/pgsql/Dockerfile')

    doFirst {
        copy {
            from 'src/main/resources/ddl.sql' into stageDir
        }
        copy {
            from 'src/main/docker/pgsql/init.sh' into stageDir
        }
    }
}


ext {
    slf4jVersion = '1.7.7'
    leveldbVersion = '0.12'
    scastleVersion = '1.58.0.0'
    springVersion = '4.3.19.RELEASE'
    junitVersion = '4.11'
    springbootVersion = '2.2.5.RELEASE'
    guavaVersion = '28.1-jre'
    gRPCVersion = '1.25.0'
    lombokVersion = '1.18.10'
    commonsCliVersion = '1.4'
    math3Version = '3.6'
    commonsLang3Version = '3.4'
    leveldbJNIVersion = '1.18'
    jargon2Version = '1.1.1'
    bouncycastleVersion = '1.61'
    commonsCollections4Version = '4.0'
    rocksdbVersion = '6.6.4'
}

dependencies {

    compile "com.google.guava:guava:${guavaVersion}"
    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compile "com.fasterxml.jackson.core:jackson-databind:2.5.1"
    compile "org.apache.commons:commons-collections4:${commonsCollections4Version}"
    compile "org.apache.commons:commons-lang3:${commonsLang3Version}"
    compile "org.apache.commons:commons-math3:${math3Version}"
    compile "commons-codec:commons-codec:1.10"
    compile "org.springframework:spring-context:${springVersion}"
    compile "com.typesafe:config:1.2.1"
    compile("com.googlecode.json-simple:json-simple:1.1.1") {
        exclude group: 'junit', module: 'junit'
    }


    // used to hide spring initialization logs messages in samples
    optional "org.slf4j:jcl-over-slf4j:${slf4jVersion}"

    compile "junit:junit:${junitVersion}"
    compile "org.springframework:spring-test:${springVersion}"
    testCompile "org.mockito:mockito-core:2.+"
    testCompile "com.github.briandilley.jsonrpc4j:jsonrpc4j:1.1"

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web
    compile "org.springframework.boot:spring-boot-starter-web:${springbootVersion}"

    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    // https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk15on
    compile "org.bouncycastle:bcprov-jdk15on:${bouncycastleVersion}"
    // https://mvnrepository.com/artifact/com.kosprov.jargon2/jargon2-api
    compile "com.kosprov.jargon2:jargon2-api:${jargon2Version}"
    // https://mvnrepository.com/artifact/com.kosprov.jargon2/jargon2-native-ri-backend
    compile "com.kosprov.jargon2:jargon2-native-ri-backend:${jargon2Version}"
    // https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java
    compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.6.1'
    // https://mvnrepository.com/artifact/net.sf.json-lib/json-lib
    compile('net.sf.json-lib:json-lib:2.2.3:jdk15')
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test
    testCompile "org.springframework.boot:spring-boot-starter-test:${springbootVersion}"

    // https://mvnrepository.com/artifact/com.alibaba/fastjson
    compile group: 'com.alibaba', name: 'fastjson', version: '1.2.47'
    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.5'
    // https://mvnrepository.com/artifact/com.googlecode.concurrentlinkedhashmap/concurrentlinkedhashmap-lru
    compile group: 'com.googlecode.concurrentlinkedhashmap', name: 'concurrentlinkedhashmap-lru', version: '1.4.2'
//     https://mvnrepository.com/artifact/javax.validation/validation-api
    compile group: 'javax.validation', name: 'validation-api', version: '2.0.0.Final'
    // https://mvnrepository.com/artifact/commons-io/commons-io
    compile group: 'commons-io', name: 'commons-io', version: '2.4'
    compile "org.springframework.boot:spring-boot-starter-jdbc:${springbootVersion}"
    compile "org.springframework.boot:spring-boot-starter-logging:${springbootVersion}"
    compile group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.6.0'
    compile group: 'org.hibernate.validator', name: 'hibernate-validator', version: '6.0.17.Final'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.8'
    compile "org.springframework.boot:spring-boot-starter-websocket:${springbootVersion}"

    compile group: 'io.netty', name: 'netty-all', version: '4.1.42.Final'
    compile "io.grpc:grpc-netty-shaded:${gRPCVersion}"
    compile "io.grpc:grpc-protobuf:${gRPCVersion}"
    compile "io.grpc:grpc-stub:${gRPCVersion}"
    // https://mvnrepository.com/artifact/org.iq80.leveldb/leveldb
    compile "org.iq80.leveldb:leveldb:${leveldbVersion}"
    compile group: 'org.ethereum', name: 'leveldbjni-all', version: '1.18.3'


    compile group: 'org.quartz-scheduler', name: 'quartz',version: '2.2.3'
    compile "commons-cli:commons-cli:${commonsCliVersion}"
    compile group: 'com.beust', name: 'jcommander', version: '1.72'
    compile group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.10.5'
    compile group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.10.5'
    compile group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.10.5'
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    compile "org.rocksdb:rocksdbjni:${rocksdbVersion}"


    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"



    compile fileTree(dir:'libs',include:['*.jar'])
    compile "org.springframework.boot:spring-boot-starter-actuator:${springbootVersion}"
    compile "org.springframework.boot:spring-boot-starter-security:${springbootVersion}"

    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.5"
    compile 'com.github.ben-manes.caffeine:caffeine:2.8.0'

    compile "org.springframework.boot:spring-boot-starter-data-jpa:${springbootVersion}"
    compile group: 'com.h2database', name: 'h2', version: '1.4.200'
}

task copyDependencies(type: Copy) {
    from configurations.runtime
    destinationDir = file('build/libs/lib')
}

jar {
    manifest {
        attributes 'Main-Class': mainClassName
        attributes 'Class-Path': '. ' + configurations.compile.collect { 'lib/' + it.getName() }.join(' ')
    }
}


run.jvmArgs=['-Xms16g']
